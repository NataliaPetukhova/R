txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
head(txt)
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
str(txt)
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
head(txt)
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
head12(txt)
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show(txt)
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
read.text(txt)
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
readtext(txt)
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
library(readtext)
install.packages("readtext")
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
library(readtext)
readtext(txt)
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
library(readtext)
readtext("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
system(txt)
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
system("lymph.txt")
txt <- read.delim("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
file.show("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt")
writeLines(readLines("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//lympha//lymph.txt"))
#Random Forests predictions are based on the generation of
#multiple classification trees.
#They can be used for both, classification and regression tasks.
#Here, it is classification task.
set.seed(42)
library(randomForest)
model_rf <- caret::train(Class ~ .,
data = train_data,
method = "rf",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
savePredictions = TRUE,
verboseIter = FALSE))
#When savePredictions = TRUE is specified,
#can access the cross-validation resuls with model_rf$pred.
model_rf$finalModel$confusion
imp <- model_rf$finalModel$importance
imp[order(imp, decreasing = TRUE), ]
# estimate variable importance
importance <- varImp(model_rf, scale = TRUE)
plot(importance)
confusionMatrix(predict(model_rf, test_data), test_data$Class)
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$benign > 0.5, "benign",
ifelse(results$malignant > 0.5, "malignant", NA))
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.5, "fibrosis",
ifelse(results$malign > 0.5, "malignant",
ifelse(results$metastases > 0.5, "metastases, NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.5, "fibrosis",
ifelse(results$malign > 0.5, "malignant",
ifelse(results$metastases > 0.5, "metastases, NA)))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.5, "fibrosis",
ifelse(results$malign > 0.5, "malignant",
ifelse(results$metastases > 0.5, "metastases, NA)))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.5, "fibrosis",
ifelse(results$malign > 0.5, "malignant",
ifelse(results$metastases > 0.5, "metastases, NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.3, "fibrosis",
ifelse(results$malign > 0.3, "malignant",
ifelse(results$metastases > 0.3, "metastases, NA)))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.5, "fibrosis",
ifelse(results$malign > 0.5, "malignant",
ifelse(results$metastases > 0.5, "metastases", NA)))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.5, "fibrosis",
ifelse(results$malign > 0.5, "malignant", "metastases"))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.3, "fibrosis",
ifelse(results$malign > 0.3, "malignant", "metastases"))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.3, "fibrosis",
ifelse(results$malign > 0.3, "malignant",
ifelse(results$metastases > 0.3, metastases", NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.3, "fibrosis",
ifelse(results$malign > 0.3, "malignant",
ifelse(results$metastases > 0.3, "metastases", NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.3, "fibrosis",
ifelse(results$malign > 0.3, "malignant",
ifelse(results$metastases > 0.3, "metastases", NA)))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$fibrosis > 0.5, "fibrosis",
ifelse(results$malign > 0.5, "malignant", NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.5, "metastases",
ifelse(results$malign > 0.5, "malignant", NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.5, "metastases",
ifelse(results$fibrosis > 0.5, "fibrosis", NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.5, "metastases",
ifelse(results$normal > 0.5, "normal", NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.5, "metastases",
ifelse(results$malign > 0.5, "malignant", NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.5, "metastases",
ifelse(results$fibrosis > 0.5, "fibrosis", NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.3, "metastases",
ifelse(results$malign > 0.3, "malignant",
ifelse(results$fibrosis > 0.3, "fibrosis", NA))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
results <- data.frame(actual = test_data$Class,
predict(model_rf, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.3, "metastases",
ifelse(results$malign > 0.3, "malignant",
ifelse(results$fibrosis > 0.3, "fibrosis", NA)))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
ggplot(results, aes(x = prediction, y = metastases, color = correct, shape = correct)) +
geom_jitter(size = 3, alpha = 0.6)
ggplot(results, aes(x = prediction, y = malignant, color = correct, shape = correct)) +
geom_jitter(size = 3, alpha = 0.6)
ggplot(results, aes(x = prediction, y = malign, color = correct, shape = correct)) +
geom_jitter(size = 3, alpha = 0.6)
ggplot(results, aes(x = prediction, y = fibrosis, color = correct, shape = correct)) +
geom_jitter(size = 3, alpha = 0.6)
ggplot(results, aes(x = prediction, y = metastases, color = correct, shape = correct)) +
geom_jitter(size = 3, alpha = 0.6)
ggplot(results, aes(x = prediction, y = malign, color = correct, shape = correct)) +
geom_jitter(size = 3, alpha = 0.6)
set.seed(42)
library(xgboost)
model_xgb <- caret::train(Class ~ .,
data = train_data,
method = "xgbTree",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
savePredictions = TRUE,
verboseIter = FALSE))
importance <- varImp(model_xgb, scale = TRUE)
plot(importance)
confusionMatrix(predict(model_xgb, test_data), test_data$Class)
results <- data.frame(actual = test_data$Class,
predict(model_xgb, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.3, "metastases",
ifelse(results$malign > 0.3, "malignant",
ifelse(results$fibrosis > 0.3, "fibrosis", NA)))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
ggplot(results, aes(x = prediction, y = malign, color = correct, shape = correct)) +
geom_jitter(size = 3, alpha = 0.6)
confusionMatrix(predict(model_xgb, test_data), test_data$Class)
results <- data.frame(actual = test_data$Class,
predict(model_xgb, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.5, "metastases",
ifelse(results$malign > 0.5, "malignant",
ifelse(results$fibrosis > 0.5, "fibrosis", NA)))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
results <- data.frame(actual = test_data$Class,
predict(model_xgb, test_data, type = "prob"))
results$prediction <- ifelse(results$metastases > 0.3, "metastases",
ifelse(results$malign > 0.3, "malignant",
ifelse(results$fibrosis > 0.3, "fibrosis", NA)))
results$correct <- ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) +
geom_bar(position = "dodge")
ggplot(results, aes(x = prediction, y = malign, color = correct, shape = correct)) +
geom_jitter(size = 3, alpha = 0.6)
library(corrplot)
# calculate correlation matrix
corMatMy <- cor(train_data[, -1])
library(corrplot)
train_data <- as.numeric(train_data)
library(corrplot)
train_data <- as.numeric(as.character(train_data))
# calculate correlation matrix
corMatMy <- cor(train_data[, -1])
library(corrplot)
train_data <- as.numeric(as.character(train_data))
train_data <- na.omit(train_data)
# calculate correlation matrix
corMatMy <- cor(train_data[, -1])
library(corrplot)
train_data <- as.numeric(as.character(train_data))
# calculate correlation matrix
corMatMy <- cor(train_data[, -1])
library(corrplot)
train_data <- as.numeric(as.character(train_data))
# calculate correlation matrix
corMatMy <- cor(train_data[, 1:18])
library(corrplot)
train_data <- as.numeric(as.character(train_data))
# calculate correlation matrix
corMatMy <- cor(train_data[,1:18])
set.seed(42)
index <- createDataPartition(data$Class, p = 0.7, list = FALSE)
train_data <- data[index, ]
test_data  <- data[-index, ]
library(corrplot)
train_data <- as.numeric(as.character(train_data))
# calculate correlation matrix
corMatMy <- cor(train_data[,1:18])
library(corrplot)
train_data <- as.numeric(as.character(train_data))
na.omit(train_data)
# calculate correlation matrix
corMatMy <- cor(train_data[,1:18])
set.seed(42)
index <- createDataPartition(data$Class, p = 0.7, list = FALSE)
train_data <- data[index, ]
test_data  <- data[-index, ]
library(corrplot)
# calculate correlation matrix
corMatMy <- cor(train_data[,1:18])
corrplot(corMatMy, order = "hclust")
#Apply correlation filter at 0.70,
highlyCor <- colnames(train_data[, 1:18])[findCorrelation(corMatMy, cutoff = 0.7, verbose = TRUE)]
#Apply correlation filter at 0.70,
highlyCor <- colnames(train_data[, -1])[findCorrelation(corMatMy, cutoff = 0.7, verbose = TRUE)]
#Apply correlation filter at 0.70,
highlyCor <- colnames(train_data[, -1])[findCorrelation(corMatMy, cutoff = 0.5, verbose = TRUE)]
#Apply correlation filter at 0.70,
highlyCor <- colnames(train_data[, -1])[findCorrelation(corMatMy, cutoff = 0.3, verbose = TRUE)]
#Apply correlation filter at 0.70,
highlyCor <- colnames(train_data[, -1])[findCorrelation(corMatMy, cutoff = 0.6, verbose = TRUE)]
library(nnet)
model_nnet<-nnet(Class ~. ,
data= train_data,
size=8)
# which variables are flagged for removal?
highlyCor
#then we remove these variables
train_data_cor <- train_data[, which(!colnames(train_data) %in% highlyCor)]
model_nnet<-nnet(Class ~. ,
data= train_data,
size=8
)
model_nnet<-nnet(Class ~. ,
data= train_data,
size=5
)
model_nnet<-nnet(Class ~. ,
data= train_data,
size=8
)
# which variables are flagged for removal?
highlyCor
#then we remove these variables
train_data_cor <- train_data[, which(!colnames(train_data) %in% highlyCor)]
model_nnet<-nnet(Class ~. ,
data= train_data,
size=8
)
library(NeuralNetTools)
# Plot a neural interpretation diagram for a neural network object
plotnet(model_nnet, cex_val =.8,max_sp=T,circle_cex=5,circle_col = 'red')
#Relative importance of input variables in neural networks using Garson's algorithm
garson(model_nnet)
olden(model_nnet)
#Predict
predict_nnet <- predict(model_nnet,test_data, type = "class")
#Draw the crosstable
library(gmodels)
CrossTable(test_data$Class,predict_nnet,prop.chisq = F,prop.r = F,prop.c = F,dnn =c("Actual Diagnosis","Predict Diagnosis"))
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave points_se," "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst", "perimeter_worst", "area_worst", "smoothness_worst", "compactness_worst", "concavity_worst", "concave points_worst", "symmetry_worst", "fractal_dimension_worst")
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave points_se," "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst", "perimeter_worst", "area_worst", "smoothness_worst", "compactness_worst", "concavity_worst", "concave points_worst", "symmetry_worst", "fractal_dimension_worst")
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave points_se," "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_worst", "concavity_worst", "concave points_worst", "symmetry_worst", "fractal_dimension_worst")
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave_points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave_points_se," "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst","perimeter_worst","area_worst","smoothness_worst","compactness_wors"", "concavity_worst", "concave points_worst", "symmetry_worst", "fractal_dimension_worst")
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave_points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave_points_se," "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst","perimeter_worst","area_worst","smoothness_worst",
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave_points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave_points_se", "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst","perimeter_worst","area_worst","smoothness_worst",
"compactness_wors", "concavity_worst", "concave points_worst","symmetry_worst","fractal_dimension_worst")
View(data)
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave_points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave_points_se", "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst","perimeter_worst","area_worst","smoothness_worst",
"compactness_wors", "concavity_worst", "concave points_worst","symmetry_worst","fractal_dimension_worst")
View(data)
# Analyse the data - checking for values, NAs, data type.
summary(data)
str(data)
data$id <- NULL
data$id <- NULL
data$Class <- factor(data$Class)
data$Cl <- ifelse(data$Class == "0", "benign", ifelse(data$Class == 1, "malignant", NA))
data$Class <- data$Cl
data$id <- NULL
data$Class <- factor(data$Class)
data$Cl <- ifelse(data$Class == "0", "benign", ifelse(data$Class == 1, "malignant", NA))
data$Class <- data$Cl
head(data)
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave_points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave_points_se", "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst","perimeter_worst","area_worst","smoothness_worst",
"compactness_wors", "concavity_worst", "concave points_worst","symmetry_worst","fractal_dimension_worst")
View(data)
# Analyse the data - checking for values, NAs, data type.
summary(data)
str(data)
data$id <- NULL
data$Cl <- ifelse(data$Class == "0", "benign", ifelse(data$Class == 1, "malignant", NA))
data$Class <- data$Cl
head(data)
data$id <- NULL
data$Cl <- ifelse(data$Class == "0", "benign", ifelse(data$Class == 1, "malignant", NA))
data$Class <- data$Cl
data$Class <- as.factor(data$Class)
head(data)
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave_points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave_points_se", "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst","perimeter_worst","area_worst","smoothness_worst",
"compactness_wors", "concavity_worst", "concave points_worst","symmetry_worst","fractal_dimension_worst")
View(data)
# Analyse the data - checking for values, NAs, data type.
summary(data)
str(data)
data$id <- NULL
data$Cl <- ifelse(data$Class == "0", "benign", ifelse(data$Class == 1, "malignant", NA))
data$Class <- data$Cl
head(data)
data$id <- NULL
data$Cl <- ifelse(data$Class == "0", "benign", ifelse(data$Class == 1, "malignant", NA))
data$Class <- data$Cl
head(data)
dim(data)
library(tidyverse)
map_int(data, function(.x) sum(is.na(.x)))
data$id <- NULL
data$Cl <- ifelse(data$Class == "0", "benign", ifelse(data$Class == 1, "malignant", NA))
data$Class <- data$Cl
data$Cl <- NULL
head(data)
dim(data)
data$id <- NULL
data$Cl <- ifelse(data$Class == "0", "benign", ifelse(data$Class == 1, "malignant", NA))
data$Class <- data$Cl
head(data)
dim(data)
data <- read.csv("C://Users//Natalia//Desktop//ITMO//R//R project//cancer data//breastcancer//cancer_data.csv", header = TRUE, stringsAsFactors = TRUE, sep = ",")
colnames(data) <- c("id", "Class", "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", "concavity_mean", "concave_points_mean", "symmetry_mean", "fractal_dimension_mean", "radius_se", "texture_se", "perimeter_se", "area_se", "smoothness_se", "compactness_se", "concavity_se", "concave_points_se", "symmetry_se", "fractal_dimension_se", "radius_worst", "texture_worst","perimeter_worst","area_worst","smoothness_worst",
"compactness_wors", "concavity_worst", "concave points_worst","symmetry_worst","fractal_dimension_worst")
View(data)
data$id <- NULL
data$Cl <- ifelse(data$Class == "0", "benign", ifelse(data$Class == 1, "malignant", NA))
data$Class <- data$Cl
head(data)
dim(data)
View(data)
library(tidyverse)
map_int(data, function(.x) sum(is.na(.x)))
# Data type "Class" as factor:
data <- as.data.frame(data, stringsAsFactors=T)
data$Class <- as.factor(data$Class)
head(data)
# Data type "Class" as factor:
data <- as.data.frame(data, stringsAsFactors=T)
data$Class <- as.factor(data$Class)
data$Cl <- NULL
head(data)
library(sparcl)
hc <- hclust(dist(data[,-1]), method = "complete")
ColorDendrogram(hc,y=data$Class, main = "Hierarchical clustering", branchlength=5)
library(sparcl)
hc <- hclust(dist(data[,2:31]), method = "complete")
ColorDendrogram(hc,y=data$Class, main = "Hierarchical clustering", branchlength=5)
library(sparcl)
hc <- hclust(dist(data[,-1]), method = "complete")
ColorDendrogram(hc,y=data$Class, main = "Hierarchical clustering", branchlength=5)
fit <- kmeans(data[,c(2:31)], 2)
names(fit)
#k-means did a fairly good job
table(data.frame(fit$cluster,data[,1]))
library(ggplot2)
ggplot(data, aes(x = Class, fill = Class)) +
geom_bar()
ggplot(data, aes(x = lymphatics)) +
geom_histogram(binwidth = 1, stat = "count")
ggplot(data, aes(x = radius_mean)) +
geom_histogram(binwidth = 1, stat = "count")
ggplot(data, aes(x = texture_mean)) +
geom_histogram(binwidth = 1, stat = "count")
ggplot(data, aes(x = area_mean)) +
geom_histogram(binwidth = 1, stat = "count")
ggplot(data, aes(x = texture_mean)) +
geom_histogram(binwidth = 1, stat = "count")
ggplot(data, aes(x = perimeter_mean)) +
geom_histogram(binwidth = 1, stat = "count")
ggplot(data, aes(x = texture_mean)) +
geom_histogram(stat = "count")
library(pcaGoPromoter)
library(ellipse)
data <-na.omit(data)
# perform pca and extract scores
pcaOutput <- pca(t(data[,2:31]), printDropped = FALSE, scale = TRUE, center = TRUE)
pcaOutput2 <- as.data.frame(pcaOutput$scores)
# define groups for plotting
pcaOutput2$groups <- data$Class
centroids <- aggregate(cbind(PC1, PC2) ~ groups, pcaOutput2, mean)
conf.rgn  <- do.call(rbind, lapply(unique(pcaOutput2$groups), function(t)
data.frame(groups = as.character(t),
ellipse(cov(pcaOutput2[pcaOutput2$groups == t, 1:2]),
centre = as.matrix(centroids[centroids$groups == t, 2:3]),
level = 0.95),
stringsAsFactors = FALSE)))
#Plot PCA with variance %
ggplot(data = pcaOutput2, aes(x = PC1, y = PC2, group = groups, color = groups)) +
geom_polygon(data = conf.rgn, aes(fill = groups), alpha = 0.2) +
geom_point(size = 2, alpha = 0.6) +
scale_color_brewer(palette = "Set1") +
labs(color = "",
fill = "",
x = paste0("PC1: ", round(pcaOutput$pov[1], digits = 2) * 100, "% variance"),
y = paste0("PC2: ", round(pcaOutput$pov[2], digits = 2) * 100, "% variance"))
